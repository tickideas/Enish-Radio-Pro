# GitHub Actions CI/CD Pipeline (Optional)
# This workflow automatically builds and tests the Docker image on push
# For Coolify auto-deployment, configure webhooks in Coolify settings

name: Backend CI/CD

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'backend/**'
      - '.github/workflows/backend-ci.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'backend/**'

jobs:
  # Build and test Docker image
  docker-build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        file: ./backend/Dockerfile
        push: false
        tags: enish-radio-backend:test
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Test Docker image
      run: |
        docker run -d --name test-backend \
          -e DATABASE_URL=postgresql://test:test@localhost:5432/test \
          -e JWT_SECRET=test-secret \
          -e NODE_ENV=production \
          -e PORT=3000 \
          enish-radio-backend:test
        
        # Wait for container to start
        sleep 10
        
        # Check if container is running
        docker ps | grep test-backend
        
        # Check logs for errors
        docker logs test-backend
        
        # Cleanup
        docker stop test-backend
        docker rm test-backend
  
  # Lint Dockerfile
  hadolint:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Run hadolint
      uses: hadolint/hadolint-action@v3.1.0
      with:
        dockerfile: ./backend/Dockerfile
        failure-threshold: warning

  # Notify on success (optional)
  notify:
    runs-on: ubuntu-latest
    needs: [docker-build, hadolint]
    if: success()
    
    steps:
    - name: Deployment ready
      run: |
        echo "âœ… Backend Docker build successful!"
        echo "Ready for Coolify deployment."

# Note: For automatic Coolify deployment:
# 1. Enable "Auto Deploy on Git Push" in Coolify application settings
# 2. Or use Coolify webhooks to trigger deployment after successful build
